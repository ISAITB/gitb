<?xml version="1.0" encoding="UTF-8"?>
<testcase id="TestCase1" package="IHE.XDS.Actor1.testcases" xmlns="http://www.gitb.com/tdl/v1/" xmlns:gitb="http://www.gitb.com/core/v1/">
    <metadata>
        <gitb:name>TestCase</gitb:name>
        <gitb:version>0.1</gitb:version>
        <gitb:description>Minimal Test Case</gitb:description>
    </metadata>
    <namespaces>
        <ns prefix="srdc">http://www.srdc.com.tr</ns>
    </namespaces>
    <imports>
        <artifact name="core_schema" type="object">gitb_core.xsd</artifact>
	    <artifact name="tdl_schema" type="object">Sample/Actor1/artifacts/Schema1.xsd</artifact>
	    <artifact name="testcase" type="object">Sample/Actor1/testcases/TestCase1.xml</artifact>
	    <module name="XSDValidator" uri="urn:gitb:xsdvalidator" />
    </imports>
    <actors>
        <gitb:actor id="role1" name="actor1" role="SUT" />
        <gitb:actor id="role2" name="actor2" role="SIMULATED" />
    </actors>
    <variables>
        <var name="uuid" type="string"/>
	    <var name="str1" type="string"/>
	    <var name="number" type="number"/>
	    <var name="recv-output" type="map"/>
	    <var name="list" type="list[number]">
		    <value>1</value>
		    <value>2</value>
		    <value>3</value>
	    </var>
	    <var name="str" type="string">
		    <value>string value</value>
	    </var>
	    <var name="str2" type="string">
		    <value>world</value>
	    </var>
	    <var name="str3" type="string"/>
	    <var name="bool" type="boolean">
		    <value>true</value>
	    </var>
	    <var name="bool2" type="boolean">
		    <value>true</value>
	    </var>
	    <var name="bool3" type="boolean">
		    <value>true</value>
	    </var>
	    <var name="bool4" type="boolean">
		    <value>false</value>
	    </var>
	    <var name="bool5" type="boolean">
		    <value>false</value>
	    </var>
        <var name="number1" type="number">
	        <value>5</value>
        </var>
        <var name="number2" type="number">
	        <value>3</value>
        </var>
	    <var name="list-output" type="list[number]"/>
	    <var name="string-output" type="string"/>
        <var name="network_host" type="string"/>
        <var name="network_port" type="string"/>
    </variables>
    <steps>
        <assign to="$uuid">srdc:generateUUID()</assign>
        <assign to="$number">srdc:multiply(srdc:add(5, $number2), srdc:subtract($number1, $number2))</assign>
        <assign to="$str">"new value"</assign>
        <!--<assign to="$bool">srdc:and($bool, false)</assign>-->
	    <if desc="test if step">
		    <cond>$bool</cond>
		    <then>
			    <assign to="$str">"then value"</assign>
		    </then>
		    <else>
			    <assign to="$str">"else value"</assign>
		    </else>
	    </if>
	    <while desc="test while step">
		    <cond>$bool2</cond>
		    <do>
			    <if desc="">
				    <cond>$bool3</cond>
				    <then>
					    <assign to="$bool3">false</assign>
				    </then>
				    <else>
					    <assign to="$bool2">false</assign>
				    </else>
			    </if>
		    </do>
	    </while>
	    <repuntil desc="">
		    <do>
			    <if desc="">
				    <cond>$bool2</cond>
				    <then>
					    <assign to="$bool2">false</assign>
				    </then>
				    <else>
					    <assign to="$bool2">true</assign>
				    </else>
			    </if>
		    </do>
		    <cond>$bool2</cond>
	    </repuntil>
	    <flow desc="">
		    <thread>
			    <assign to="$bool4">false</assign>
			    <assign to="$bool5">true</assign>
		    </thread>
		    <thread>
			    <assign to="$bool5">false</assign>
		    </thread>
	    </flow>
	    <call id="c" path="test">
		    <input>./false</input>
		    <input>$number1</input>
	    </call>
	    <call id="d" path="test">
		    <input name="number-param">$number2</input>
		    <input name="bool-param">./true</input>
	    </call>
	    <call path="test">
		    <input name="bool-param">./true</input>
		    <input name="number-param">$number2</input>
		    <output>$list</output>
		    <output>$str3</output>
	    </call>
	    <foreach desc="foreach loop" end="10">
		    <do>
			    <assign to="$number1">$i</assign>
		    </do>
	    </foreach>
	    <!-- throws exception since $random-string is not defined -->
	    <!--<call path="test">
		    <input name="bool-param">true</input>
		    <input name="number-param">$number2</input>
		    <output name="string-output">$random-string</output>
		    <output name="list-output">$list</output>
	    </call>-->
        <interact desc="interaction step" with="actor2">
            <request desc="server address" with="actor2" type="string" name="network_host"/>
            <request desc="server port" with="actor2" type="string" name="network_port"/>
        </interact>
        <verify handler="XSDValidator" desc="Validate testcase against tdl schema">
            <input name="xmldocument">$testcase</input>
            <input name="xsddocument">$tdl_schema</input>
        </verify>
	    <!-- use sendSampleMessage.sh in gitb-test-resources/src/main/resources to send a sample message -->
	    <!--<btxn from="actor1" to="actor2" txnId="t1" handler="SoapMessaging"/>
	    <receive id="recv-output" desc="test receive message" from="actor1" to="actor2" txnId="t1"/>
	    <etxn txnId="t1"/>-->
    </steps>
	<scriptlets>
		<scriptlet id="test" package="srdc">
			<metadata>
				<gitb:name>test scriptlet</gitb:name>
				<gitb:version>0.1</gitb:version>
				<gitb:description>Minimal scriptlet</gitb:description>
			</metadata>
			<params>
				<var name="bool-param" type="boolean">
				</var>
				<var name="number-param" type="number">
				</var>
			</params>
			<variables>
				<var name="list-output" type="list[number]">
					<value>1</value>
					<value>2</value>
					<value>3</value>
				</var>
				<var name="string-output" type="string">
					<value>srdc:generateUUID()</value>
				</var>
			</variables>
			<steps>
				<assign to="$string-output">srdc:generateUUID()</assign>
				<if desc="">
					<cond>$bool-param</cond>
					<then>
						<assign to="$list-output" append="true">$number-param</assign>
					</then>
					<else>
						<assign to="$string-output">test</assign>
					</else>
				</if>
			</steps>
			<output name="list-output"/>
			<output name="string-output"/>
		</scriptlet>
	</scriptlets>
</testcase>
