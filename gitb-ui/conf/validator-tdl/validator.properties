# The embedded messaging handlers to consider for valid handler references.
validator.messagingHandlers = TCPMessaging, SoapMessaging, HttpMessaging, HttpsMessaging, HttpProxyMessaging, AS2Messaging, DNSMessaging, NonValidatingPeppolAS2Messaging, OFTP2Messaging, PeppolAS2Messaging, SMLMessaging, SMPFixedMessaging, SMPMessaging, UDPMessaging
# TCPMessaging inputs and configs.
validator.messagingHandlers.TCPMessaging.input.required = content
# SoapMessaging inputs and configs.
validator.messagingHandlers.SoapMessaging.input.optional = soap_message, http_headers, soap_attachments
validator.messagingHandlers.SoapMessaging.config.tx.optional = http.ssl
validator.messagingHandlers.SoapMessaging.config.receive.required = soap.version
validator.messagingHandlers.SoapMessaging.config.send.required = soap.version
validator.messagingHandlers.SoapMessaging.config.send.optional = soap.encoding, http.uri.extension
# HttpMessaging inputs and configs.
validator.messagingHandlers.HttpMessaging.input.optional = http_version, http_headers, http_body, http_parts
validator.messagingHandlers.HttpMessaging.config.tx.optional = http.ssl
validator.messagingHandlers.HttpMessaging.config.receive.optional = status.code
validator.messagingHandlers.HttpMessaging.config.send.required = http.method
validator.messagingHandlers.HttpMessaging.config.send.optional = http.uri, http.uri.extension, status.code
# HttpsMessaging inputs and configs.
validator.messagingHandlers.HttpsMessaging.input.optional = http_headers, http_body
validator.messagingHandlers.HttpsMessaging.config.receive.optional = status.code
validator.messagingHandlers.HttpsMessaging.config.send.required = http.method
validator.messagingHandlers.HttpsMessaging.config.send.optional = http.uri.extension, status.code
# HttpProxyMessaging inputs and configs.
validator.messagingHandlers.HttpProxyMessaging.input.optional = request_data
validator.messagingHandlers.HttpProxyMessaging.config.send.optional = proxy.address
# AS2Messaging inputs and configs.
validator.messagingHandlers.AS2Messaging.input.required = as2_message
validator.messagingHandlers.AS2Messaging.input.optional = http_headers
validator.messagingHandlers.AS2Messaging.config.receive.optional = status.code
validator.messagingHandlers.AS2Messaging.config.send.optional = as2.encoding, http.uri.extension, status.code
# DNSMessaging inputs and configs.
validator.messagingHandlers.DNSMessaging.input.required = dns.address
validator.messagingHandlers.DNSMessaging.config.receive.required = dns.domain
# NonValidatingPeppolAS2Messaging inputs and configs.
validator.messagingHandlers.NonValidatingPeppolAS2Messaging.input.optional = http_headers, business_document
# OFTP2Messaging inputs and configs.
validator.messagingHandlers.OFTP2Messaging.input.required = file_content, file_name
validator.messagingHandlers.OFTP2Messaging.config.receive.optional = secure.connection, buffer.size, window.size
validator.messagingHandlers.OFTP2Messaging.config.send.optional = secure.connection, buffer.size, window.size
# PeppolAS2Messaging inputs and configs.
validator.messagingHandlers.PeppolAS2Messaging.input.optional = http_headers, business_document
validator.messagingHandlers.PeppolAS2Messaging.config.receive.optional = document.identifier, process.identifier
validator.messagingHandlers.PeppolAS2Messaging.config.send.optional = http.uri.extension
# SMLMessaging inputs and configs.
validator.messagingHandlers.SMLMessaging.input.required = dns.address
validator.messagingHandlers.SMLMessaging.config.receive.required = dns.domain
# SMPFixedMessaging inputs and configs.
validator.messagingHandlers.SMPFixedMessaging.input.required = smp_metadata
validator.messagingHandlers.SMPFixedMessaging.input.optional = http_headers
validator.messagingHandlers.SMPFixedMessaging.config.send.optional = http.uri.extension
# SMPMessaging inputs and configs.
validator.messagingHandlers.SMPMessaging.input.required = smp_metadata
validator.messagingHandlers.SMPMessaging.input.optional = http_headers
validator.messagingHandlers.SMPMessaging.config.send.optional = http.uri.extension
# UDPMessaging inputs and configs.
validator.messagingHandlers.UDPMessaging.input.required = content
# The embedded validation handlers to consider for valid handler references.
validator.validationHandlers = NumberValidator, StringValidator, RegExpValidator, XPathValidator, XSDValidator, SchematronValidator
# NumberValidator inputs.
validator.validationHandlers.NumberValidator.input.required = actualnumber, expectednumber
# StringValidator inputs.
validator.validationHandlers.StringValidator.input.required = actualstring, expectedstring
# RegExpValidator inputs.
validator.validationHandlers.RegExpValidator.input.required = input, expression
# XPathValidator inputs.
validator.validationHandlers.XPathValidator.input.required = xmldocument, xpathexpression
# XSDValidator inputs.
validator.validationHandlers.XSDValidator.input.required = xsddocument, xmldocument
# SchematronValidator inputs.
validator.validationHandlers.SchematronValidator.input.required = schematron, xmldocument
# The supported data types (simple and container types).
validator.dataTypes = string, number, boolean, binary, object, schema
validator.containedDataTypes = string, number, boolean, binary, object, schema, map
validator.containerDataTypes = map, list
# The accepted mime types for the test suite ZIP archive.
validator.acceptedMimeTypes = application/zip, application/x-zip-compressed, multipart/x-zip