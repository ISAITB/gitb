# Routes
# This file defines all application routes (Higher priority routes first)
#
# Note: @controllers syntax signifies the actual controller instance, retrieved via GlobalSettings.getController().
# ~~~~

GET      /favicon.ico   @controllers.SystemConfigurationService.getFaviconForTheme

GET      /callback      org.pac4j.play.CallbackController.callback()
POST     /callback      org.pac4j.play.CallbackController.callback()

# Single endpoint for serving AngularJS
GET     /                                   @controllers.Application.index
GET     /app                                @controllers.Application.app
OPTIONS /*all                               @controllers.Application.preFlight(all: String)
GET     /assets/javascripts/routes          @controllers.Application.javascriptRoutes

# Theme API
GET     /theme/css                          @controllers.SystemConfigurationService.getCssForTheme
GET     /theme/logo                         @controllers.SystemConfigurationService.getLogo
GET     /theme/footer                       @controllers.SystemConfigurationService.getFooterLogo

# Authentication management API
POST    /oauth/access_token                 @controllers.AuthenticationService.access_token
POST    /oauth/logout                       @controllers.AuthenticationService.logout
GET     /check/email                        @controllers.AuthenticationService.checkEmail
GET     /check/memberemail                  @controllers.AuthenticationService.checkEmailOfOrganisationMember
GET     /check/sysadminemail                @controllers.AuthenticationService.checkEmailOfSystemAdmin
GET     /check/comadminemail                @controllers.AuthenticationService.checkEmailOfCommunityAdmin
GET     /check/orguseremail                 @controllers.AuthenticationService.checkEmailOfOrganisationUser
GET     /sso/accounts                       @controllers.AuthenticationService.getUserFunctionalAccounts
POST    /sso/linkFunctionalAccount          @controllers.AuthenticationService.linkFunctionalAccount
GET     /sso/unlinkedAccounts               @controllers.AuthenticationService.getUserUnlinkedFunctionalAccounts
POST    /sso/select                         @controllers.AuthenticationService.selectFunctionalAccount
POST    /sso/migrate                        @controllers.AuthenticationService.migrateFunctionalAccount
POST    /user/disconnect                    @controllers.AuthenticationService.disconnectFunctionalAccount

# Account management API
GET	    /vendor/profile                     @controllers.AccountService.getVendorProfile
POST	/vendor/profile                     @controllers.AccountService.updateVendorProfile
GET	    /vendor/users                       @controllers.AccountService.getVendorUsers
POST	/user/register                      @controllers.AccountService.registerUser
GET	    /user/profile                       @controllers.AccountService.getUserProfile
GET	    /user/community                     @controllers.CommunityService.getUserCommunity
POST	/user/profile                       @controllers.AccountService.updateUserProfile
GET     /app/configuration                  @controllers.AccountService.getConfiguration
POST    /user/feedback                      @controllers.AccountService.submitFeedback
POST    /user/selfreg                       @controllers.CommunityService.selfRegister
GET     /user/selfreg                       @controllers.CommunityService.getSelfRegistrationOptions

# System mangement API
GET     /suts/sysparam/:id                  @controllers.SystemService.getSystemParameterValues(id: Long)
POST	/suts/:sut_id/profile               @controllers.SystemService.updateSystemProfile(sut_id : Long)
GET	    /suts/:sut_id                       @controllers.SystemService.getSystemProfile(sut_id : Long)
DELETE  /suts/:sut_id                       @controllers.SystemService.deleteSystem(sut_id : Long)
POST    /suts/:sut_id/conformance           @controllers.SystemService.defineConformanceStatement(sut_id : Long)
DELETE  /suts/:sut_id/conformance           @controllers.SystemService.deleteConformanceStatement(sut_id: Long)
GET     /suts/:sut_id/conformance           @controllers.SystemService.getConformanceStatements(sut_id : Long)
#GET	/suts/:sut_id/configs               @controllers.SystemService.getSystemConfigurations(sut_id : Long)
#POST	/suts/:sut_id/configs               @controllers.SystemService.updateSystemConfigurations(sut_id : Long)
GET	    /vendor/systems                     @controllers.SystemService.getSystemsByOrganization
GET	    /vendor/systems/community           @controllers.SystemService.getSystemsByCommunity(communityId: Long)
POST	/vendor/systems/register            @controllers.SystemService.registerSystemWithOrganization

# Test Case management API
GET	    /specDomain                         @controllers.ConformanceService.getDomainOfSpecification(spec_id: Long)
GET	    /domains                            @controllers.ConformanceService.getDomains
GET	    /domains/system                     @controllers.ConformanceService.getDomainsForSystem(systemId: Long)
GET	    /domains/community                  @controllers.ConformanceService.getCommunityDomain
GET     /domains/conformance                @controllers.ConformanceService.getConformanceOverview
POST    /domains                            @controllers.ConformanceService.createDomain
DELETE  /domains/:domain_id                 @controllers.ConformanceService.deleteDomain(domain_id: Long)
POST    /domains/:domain_id                 @controllers.ConformanceService.updateDomain(domain_id: Long)
GET	    /domains/:domain_id/specs           @controllers.ConformanceService.getDomainSpecs(domain_id : Long)
GET     /specs                              @controllers.ConformanceService.getSpecs
GET     /specs/system                       @controllers.ConformanceService.getSpecsForSystem(systemId: Long)
POST    /specs                              @controllers.ConformanceService.createSpecification
GET	    /specs/:spec_id/actors              @controllers.ConformanceService.getSpecActors(spec_id : Long)
GET	    /specs/:spec_id/suites              @controllers.ConformanceService.getSpecTestSuites(spec_id : Long)
POST    /specs/:spec_id/deploy              @controllers.ConformanceService.deployTestSuite(spec_id: Long)
POST    /specs/:spec_id/deploy/resolve      @controllers.ConformanceService.resolvePendingTestSuite(spec_id: Long)
DELETE  /specs/:spec_id                     @controllers.SpecificationService.deleteSpecification(spec_id: Long)
POST    /specs/:spec_id                     @controllers.SpecificationService.updateSpecification(spec_id: Long)
GET     /actors                             @controllers.ConformanceService.getActors
GET     /actors/domain                      @controllers.ConformanceService.getActorsForDomain(domainId: Long)
POST    /actors                             @controllers.ConformanceService.createActor
DELETE  /actors/:actor_id                   @controllers.ActorService.deleteActor(actor_id : Long)
POST    /actors/:actor_id                   @controllers.ActorService.updateActor(actor_id : Long)
GET	    /actors/:actor_id/conformance/:sut_id @controllers.ConformanceService.getConformanceStatus(actor_id : Long, sut_id : Long)
GET	    /actors/:actor_id/conformance/:sut_id/:testsuite_id @controllers.ConformanceService.getConformanceStatusForTestSuite(actor_id : Long, sut_id : Long, testsuite_id : Long)
GET	    /testcases/:testCaseId              @controllers.ConformanceService.getTestSuiteTestCase(testCaseId : Long)
GET	    /testcases/:id/documentation        @controllers.ConformanceService.getTestCaseDocumentation(id : Long)
GET	    /testsuites/:id/documentation       @controllers.ConformanceService.getTestSuiteDocumentation(id : Long)
GET     /actors/:actor_id/endpoints         @controllers.ConformanceService.getEndpointsForActor(actor_id : Long)
POST    /endpoints                          @controllers.ConformanceService.createEndpoint
DELETE  /endpoints/:endpoint_id             @controllers.EndPointService.deleteEndPoint(endpoint_id : Long)
POST    /endpoints/:endpoint_id             @controllers.EndPointService.updateEndPoint(endpoint_id : Long)
POST    /parameters                         @controllers.ConformanceService.createParameter
DELETE  /parameters/:parameter_id           @controllers.ParameterService.deleteParameter(parameter_id : Long)
POST    /parameters/:parameter_id           @controllers.ParameterService.updateParameter(parameter_id : Long)
GET     /domains/:domain_id/parameters                          @controllers.ConformanceService.getDomainParameters(domain_id : Long)
GET     /domains/:domain_id/parameters/:domain_parameter_id     @controllers.ConformanceService.getDomainParameter(domain_id : Long, domain_parameter_id : Long)
POST    /domains/:domain_id/parameters                          @controllers.ConformanceService.createDomainParameter(domain_id : Long)
DELETE  /domains/:domain_id/parameters/:domain_parameter_id     @controllers.ConformanceService.deleteDomainParameter(domain_id : Long, domain_parameter_id : Long)
POST    /domains/:domain_id/parameters/:domain_parameter_id     @controllers.ConformanceService.updateDomainParameter(domain_id : Long, domain_parameter_id : Long)

DELETE  /testresults/obsolete/all           @controllers.ConformanceService.deleteAllObsoleteTestResults
DELETE  /testresults/obsolete/system        @controllers.ConformanceService.deleteObsoleteTestResultsForSystem
DELETE  /testresults/obsolete/community     @controllers.ConformanceService.deleteObsoleteTestResultsForCommunity

# User management API
GET     /admins/all                         @controllers.UserService.getSystemAdministrators
POST    /admins/create                      @controllers.UserService.createSystemAdmin
GET     /admins/:id                         @controllers.UserService.getUserById(id : Long)
POST    /admins/:id                         @controllers.UserService.updateSystemAdminProfile(id : Long)
DELETE  /admins/:id                         @controllers.UserService.deleteAdmin(id : Long)

# Session management API
GET     /dashboard/tests/all                @controllers.RepositoryService.getAllTestCases
GET     /dashboard/tests/system             @controllers.RepositoryService.getTestCasesForSystem(systemId: Long)
GET     /dashboard/tests/community          @controllers.RepositoryService.getTestCasesForCommunity(communityId: Long)
GET     /dashboard/systems                  @controllers.SystemService.getSystems
GET     /dashboard/active                   @controllers.ReportService.getActiveTestResults
GET     /dashboard/finished                 @controllers.ReportService.getFinishedTestResults
GET     /dashboard/count                    @controllers.ReportService.getFinishedTestResultsCount
GET     /dashboard/config                   @controllers.SystemConfigurationService.getSessionAliveTime
POST    /dashboard/config                   @controllers.SystemConfigurationService.updateSessionAliveTime
GET     /dashboard/suites/all               @controllers.TestSuiteService.getAllTestSuitesWithTestCases
GET     /dashboard/suites/community         @controllers.TestSuiteService.getTestSuitesWithTestCasesForCommunity(communityId: Long)
GET     /dashboard/suites/system            @controllers.TestSuiteService.getTestSuitesWithTestCasesForSystem(systemId: Long)

GET     /pages/default                      @controllers.LandingPageService.getCommunityDefaultLandingPage
GET     /pages/:id                          @controllers.LandingPageService.getLandingPageById(id : Long)
DELETE  /pages/:id                          @controllers.LandingPageService.deleteLandingPage(id : Long)
POST    /pages/:id                          @controllers.LandingPageService.updateLandingPage(id : Long)

GET     /notices/default                    @controllers.LegalNoticeService.getCommunityDefaultLegalNotice
GET     /notices/tbdefault                  @controllers.LegalNoticeService.getTestBedDefaultLegalNotice
GET     /notices/:id                        @controllers.LegalNoticeService.getLegalNoticeById(id : Long)
DELETE  /notices/:id                        @controllers.LegalNoticeService.deleteLegalNotice(id : Long)
POST    /notices/:id                        @controllers.LegalNoticeService.updateLegalNotice(id : Long)

GET     /errortemplates/default             @controllers.ErrorTemplateService.getCommunityDefaultErrorTemplate
GET     /errortemplates/:id                 @controllers.ErrorTemplateService.getErrorTemplateById(id : Long)
DELETE  /errortemplates/:id                 @controllers.ErrorTemplateService.deleteErrorTemplate(id : Long)
POST    /errortemplates/:id                 @controllers.ErrorTemplateService.updateErrorTemplate(id : Long)

GET     /organizations/all                  @controllers.OrganizationService.getOrganizations
POST    /organizations/create               @controllers.OrganizationService.createOrganization
GET     /organizations/users                @controllers.UserService.getUsersByOrganization(id : Long)
GET     /organizations/:org_id              @controllers.OrganizationService.getOrganizationById(org_id : Long)
GET     /organizations/system/:system_id    @controllers.OrganizationService.getOrganizationBySystemId(system_id : Long)

DELETE  /organizations/:id                  @controllers.OrganizationService.deleteOrganization(id: Long)
POST    /organizations/:id                  @controllers.OrganizationService.updateOrganization(id : Long)
POST    /organizations/:id/users/create     @controllers.UserService.createUser(id: Long)
POST    /users/:user_id                     @controllers.UserService.updateUserProfile(user_id: Long)
DELETE  /users/:user_id                     @controllers.UserService.deleteVendorUser(user_id: Long)
GET     /organizations/orgparam/:id         @controllers.OrganizationService.getOrganisationParameterValues(id: Long)
GET     /organizations/own/orgparam         @controllers.OrganizationService.getOwnOrganisationParameterValues
POST    /organizations/orgparam/:id         @controllers.OrganizationService.updateOrganisationParameterValues(id: Long)

GET     /communities/all                    @controllers.CommunityService.getCommunities
POST    /communities/create                 @controllers.CommunityService.createCommunity
GET     /communities/:id                    @controllers.CommunityService.getCommunityById(id : Long)
POST    /communities/:id                    @controllers.CommunityService.updateCommunity(id : Long)
DELETE  /communities/:id                    @controllers.CommunityService.deleteCommunity(id: Long)
POST    /communities/orgparam/create        @controllers.CommunityService.createOrganisationParameter
POST    /communities/orgparam/:id           @controllers.CommunityService.updateOrganisationParameter(id: Long)
DELETE  /communities/orgparam/:id           @controllers.CommunityService.deleteOrganisationParameter(id: Long)
GET     /communities/orgparam/:id           @controllers.CommunityService.getOrganisationParameters(id: Long)
POST    /communities/sysparam/create        @controllers.CommunityService.createSystemParameter
POST    /communities/sysparam/:id           @controllers.CommunityService.updateSystemParameter(id: Long)
DELETE  /communities/sysparam/:id           @controllers.CommunityService.deleteSystemParameter(id: Long)
GET     /communities/sysparam/:id           @controllers.CommunityService.getSystemParameters(id: Long)
GET     /communities/organizations/:id      @controllers.OrganizationService.getOrganizationsByCommunity(id: Long)
GET     /communities/pages/:id              @controllers.LandingPageService.getLandingPagesByCommunity(id: Long)
POST    /communities/pages/create           @controllers.LandingPageService.createLandingPage
GET     /communities/notices/:id            @controllers.LegalNoticeService.getLegalNoticesByCommunity(id: Long)
POST    /communities/notices/create         @controllers.LegalNoticeService.createLegalNotice
GET     /communities/errortemplates/:id     @controllers.ErrorTemplateService.getErrorTemplatesByCommunity(id: Long)
POST    /communities/errortemplates/create  @controllers.ErrorTemplateService.createErrorTemplate
GET     /communities/admins/all             @controllers.UserService.getCommunityAdministrators
POST    /communities/admins/create          @controllers.UserService.createCommunityAdmin
POST    /communities/admins/create          @controllers.UserService.createCommunityAdmin
POST    /communities/admins/:id             @controllers.UserService.updateCommunityAdminProfile(id : Long)
GET     /communities/labels/:id             @controllers.CommunityService.getCommunityLabels(id: Long)
POST    /communities/labels/:id             @controllers.CommunityService.setCommunityLabels(id: Long)

# Test Result management API
POST    /tests/binaryMetadata                           @controllers.TestResultService.getBinaryMetadata()

# Test management API
GET	    /tests/:test_id/definition          @controllers.TestService.getTestCaseDefinition(test_id : String)
GET	    /actors/definition                  @controllers.TestService.getActorDefinitions()
POST	/tests/:test_id/initiate            @controllers.TestService.initiate(test_id:String)
POST	/tests/:session_id/configure        @controllers.TestService.configure(session_id:String)
POST	/tests/:session_id/provide          @controllers.TestService.provideInput(session_id:String)
POST	/tests/:session_id/preliminary      @controllers.TestService.initiatePreliminary(session_id:String)
POST	/tests/:session_id/start            @controllers.TestService.start(session_id:String)
POST	/tests/:session_id/stop             @controllers.TestService.stop(session_id:String)
POST	/tests/:session_id/restart          @controllers.TestService.restart(session_id:String)
POST    /tests/startHeadless                @controllers.TestService.startHeadlessTestSessions

# WebSocket management API
GET     /ws                                 @controllers.WebSocketService.socket

# Test suite management API
DELETE  /suite/:suite_id/undeploy           @controllers.TestSuiteService.undeployTestSuite(suite_id: Long)
GET     /suite/:suite_id                    @controllers.TestSuiteService.downloadTestSuite(suite_id: Long)

# Endpoint management API
GET     /endpoints                          @controllers.ConformanceService.getEndpoints
GET     /endpoints/checkConfig              @controllers.ConformanceService.checkConfigurations
GET     /endpoints/systemConfig             @controllers.ConformanceService.getSystemConfigurations
GET     /endpoints/:endpoint_id/config      @controllers.SystemService.getEndpointConfigurations(endpoint_id: Long)
GET     /endpoints/config                   @controllers.SystemService.getConfigurationsWithEndpointIds()
POST    /endpoints/:endpoint_id/config      @controllers.SystemService.saveEndpointConfiguration(endpoint_id: Long)
DELETE  /endpoints/:endpoint_id/config      @controllers.SystemService.deleteEndpointConfiguration(endpoint_id: Long)

# Report management API
GET     /reports/active                     @controllers.ReportService.getSystemActiveTestResults
GET     /reports                            @controllers.ReportService.getTestResults
GET     /reports/count                      @controllers.ReportService.getTestResultsCount
GET     /reports/:session_id                @controllers.ReportService.getTestResultOfSession(session_id: String)
POST    /reports/create                     @controllers.ReportService.createTestReport
GET     /reports/:session_id/steps          @controllers.ReportService.getTestStepResults(session_id:String)

# Conformance certificate API
GET     /conformancecertificate             @controllers.ConformanceService.getConformanceCertificateSettings(community_id: Long)
POST    /conformancecertificate             @controllers.ConformanceService.updateConformanceCertificateSettings(community_id: Long)
POST    /conformancecertificate/test        @controllers.ConformanceService.testKeystoreSettings(community_id: Long)

# Repository file serving and management API
GET     /repository/tests/:test_id/definition               @controllers.RepositoryService.getTestCaseDefinition(test_id:String)
GET     /repository/reports/teststep/:session_id/*file      @controllers.RepositoryService.getTestStepReport(session_id: String, file)
GET     /repository/export/testcase                         @controllers.RepositoryService.exportTestCaseReport
GET     /repository/export/teststep/:session_id/*path       @controllers.RepositoryService.exportTestStepReport(session_id: String, path)
GET     /repository/export/conformance                      @controllers.RepositoryService.exportConformanceStatementReport
POST    /repository/export/certificatedemo                  @controllers.RepositoryService.exportDemoConformanceCertificateReport(community_id: Long)
POST    /repository/export/certificate                      @controllers.RepositoryService.exportConformanceCertificateReport()
GET     /repository/resource/:test_id/*file                 @controllers.RepositoryService.getTestSuiteResource(test_id: String, file: String)

POST    /communities/export/:id                             @controllers.RepositoryService.exportCommunity(id: Long)
POST    /communities/import/preview/:id                     @controllers.RepositoryService.uploadCommunityExport(id: Long)
POST    /communities/import/cancel/:id                      @controllers.RepositoryService.cancelCommunityImport(id: Long)
POST    /communities/import/confirm/:id                     @controllers.RepositoryService.confirmCommunityImportCommunityAdmin(id: Long)
POST    /communities/import/confirm/admin/:id               @controllers.RepositoryService.confirmCommunityImportTestBedAdmin(id: Long)
POST    /domains/export/:id                                 @controllers.RepositoryService.exportDomain(id: Long)
POST    /domains/import/preview/:id                         @controllers.RepositoryService.uploadDomainExport(id: Long)
POST    /domains/import/cancel/:id                          @controllers.RepositoryService.cancelDomainImport(id: Long)
POST    /domains/import/confirm/:id                         @controllers.RepositoryService.confirmDomainImportCommunityAdmin(id: Long)
POST    /domains/import/confirm/admin/:id                   @controllers.RepositoryService.confirmDomainImportTestBedAdmin(id: Long)

# Map static resources from the /public folder to the /assets URL path
GET     /assets/*file               controllers.Assets.at(path="/public", file)
GET     /webjars/*file              controllers.WebJarAssets.at(file)