# Routes
# This file defines all application routes (Higher priority routes first)
#
# Note: @controllers syntax signifies the actual controller instance, retrieved via GlobalSettings.getController().
# ~~~~

GET      /favicon.ico   @controllers.SystemConfigurationService.getFaviconForTheme()

GET      /callback      @org.pac4j.play.CallbackController.callback(request: Request)
POST     /callback      @org.pac4j.play.CallbackController.callback(request: Request)

# Single endpoint for serving AngularJS
GET     /                                   @controllers.Application.index()
GET     /app                                @controllers.Application.app()
OPTIONS /*all                               @controllers.Application.preFlight(all: String)
GET     /assets/javascripts/routes          @controllers.Application.javascriptRoutes()

# Theme API
GET     /api/theme/css                             @controllers.SystemConfigurationService.getCssForTheme()
GET     /api/theme/resource/:themeId/:resourceName @controllers.SystemConfigurationService.getThemeResource(themeId: Long, resourceName: String)

# Authentication management API
POST    /api/oauth/access_token                 @controllers.AuthenticationService.access_token()
POST    /api/oauth/replacePassword              @controllers.AuthenticationService.replaceOnetimePassword()
POST    /api/oauth/logout                       @controllers.AuthenticationService.logout()
GET     /api/check/email                        @controllers.AuthenticationService.checkEmail()
GET     /api/check/memberemail                  @controllers.AuthenticationService.checkEmailOfOrganisationMember()
GET     /api/check/sysadminemail                @controllers.AuthenticationService.checkEmailOfSystemAdmin()
GET     /api/check/comadminemail                @controllers.AuthenticationService.checkEmailOfCommunityAdmin()
GET     /api/check/orguseremail                 @controllers.AuthenticationService.checkEmailOfOrganisationUser()
GET     /api/sso/accounts                       @controllers.AuthenticationService.getUserFunctionalAccounts()
POST    /api/sso/linkFunctionalAccount          @controllers.AuthenticationService.linkFunctionalAccount()
GET     /api/sso/unlinkedAccounts               @controllers.AuthenticationService.getUserUnlinkedFunctionalAccounts()
POST    /api/sso/select                         @controllers.AuthenticationService.selectFunctionalAccount()
POST    /api/sso/migrate                        @controllers.AuthenticationService.migrateFunctionalAccount()
POST    /api/user/disconnect                    @controllers.AuthenticationService.disconnectFunctionalAccount()

# Account management API
GET	    /api/vendor/profile                     @controllers.AccountService.getVendorProfile()
POST	/api/vendor/profile                     @controllers.AccountService.updateVendorProfile()
GET	    /api/vendor/users                       @controllers.AccountService.getVendorUsers()
POST	/api/user/register                      @controllers.AccountService.registerUser()
GET	    /api/user/profile                       @controllers.AccountService.getUserProfile()
GET	    /api/user/community                     @controllers.CommunityService.getUserCommunity()
POST	/api/user/profile                       @controllers.AccountService.updateUserProfile()
GET     /api/app/configuration                  @controllers.AccountService.getConfiguration()
POST    /api/user/feedback                      @controllers.AccountService.submitFeedback()
POST    /api/user/selfreg                       @controllers.CommunityService.selfRegister()
GET     /api/user/selfreg                       @controllers.CommunityService.getSelfRegistrationOptions()
GET     /api/vendor/organisation/hasTests       @controllers.OrganizationService.ownOrganisationHasTests()
GET     /api/vendor/system/:sut_id/hasTests     @controllers.SystemService.ownSystemHasTests(sut_id: Long)
GET     /api/vendor/user/:id                    @controllers.UserService.getOwnOrganisationUserById(id : Long)

# System mangement API
GET     /api/suts/sysparam/:id                  @controllers.SystemService.getSystemParameterValues(id: Long)
GET     /api/suts/sysparam/:sut_id/parameters/:parameterId/download @controllers.SystemService.downloadSystemParameterFile(sut_id : Long, parameterId : Long)
GET     /api/suts/sysparam/check/:id            @controllers.SystemService.checkSystemParameterValues(id: Long)
POST	/api/suts/:sut_id/profile               @controllers.SystemService.updateSystemProfile(sut_id : Long)
GET	    /api/sut/byid/:sut_id                   @controllers.SystemService.getSystemById(sut_id : Long)
GET	    /api/suts/:sut_id                       @controllers.SystemService.getSystemProfile(sut_id : Long)
DELETE  /api/suts/:sut_id                       @controllers.SystemService.deleteSystem(sut_id : Long)
POST    /api/suts/:sut_id/conformance           @controllers.SystemService.defineConformanceStatements(sut_id : Long)
DELETE  /api/suts/:sut_id/conformance           @controllers.SystemService.deleteConformanceStatement(sut_id: Long)
GET     /api/suts/:sut_id/conformance           @controllers.ConformanceService.getConformanceStatementsForSystem(sut_id : Long)
GET     /api/suts/:sut_id/conformance/:actor_id @controllers.ConformanceService.getConformanceStatement(sut_id : Long, actor_id: Long)
GET     /api/suts/:sut_id/availableStatements   @controllers.ConformanceService.getAvailableConformanceStatements(sut_id : Long)
GET	    /api/vendor/systems                     @controllers.SystemService.getSystemsByOrganization()
POST	/api/vendor/systems/register            @controllers.SystemService.registerSystemWithOrganization()
POST    /api/suts/:sut_id/apiKey                @controllers.SystemService.updateSystemApiKey(sut_id: Long)
DELETE  /api/suts/:sut_id/apiKey                @controllers.SystemService.deleteSystemApiKey(sut_id: Long)

# Test Case management API
GET	    /api/actorDomain/:actor_id              @controllers.ConformanceService.getDomainOfActor(actor_id: Long)
GET	    /api/specDomain                         @controllers.ConformanceService.getDomainOfSpecification(spec_id: Long)
GET	    /api/domains                            @controllers.ConformanceService.getDomains()
GET	    /api/domains/community                  @controllers.ConformanceService.getCommunityDomain()
POST    /api/domains/conformance                @controllers.ConformanceService.getConformanceOverview()
POST    /api/domains/conformance/snapshot       @controllers.ConformanceService.createConformanceSnapshot()
GET     /api/domains/conformance/snapshot       @controllers.ConformanceService.getConformanceSnapshots()
GET     /api/domains/conformance/snapshot/:id   @controllers.ConformanceService.getConformanceSnapshot(id: Long)
DELETE  /api/domains/conformance/snapshot/:id   @controllers.ConformanceService.deleteConformanceSnapshot(id: Long)
POST    /api/domains/conformance/snapshot/:id   @controllers.ConformanceService.editConformanceSnapshot(id: Long)
POST    /api/domains/conformance/latest/:id     @controllers.ConformanceService.setLatestConformanceStatusLabel(id: Long)
POST    /api/domains                            @controllers.ConformanceService.createDomain()
DELETE  /api/domains/:domain_id                 @controllers.ConformanceService.deleteDomain(domain_id: Long)
POST    /api/domains/:domain_id                 @controllers.ConformanceService.updateDomain(domain_id: Long)
GET	    /api/domains/:domain_id/specs           @controllers.ConformanceService.getDomainSpecs(domain_id: Long)
GET	    /api/domains/:domain_id/suites          @controllers.ConformanceService.getSharedTestSuites(domain_id: Long)
POST	/api/domains/suites/link                @controllers.ConformanceService.linkSharedTestSuite()
POST	/api/domains/suites/linkconfirm         @controllers.ConformanceService.confirmLinkSharedTestSuite()
POST	/api/domains/suites/unlink              @controllers.ConformanceService.unlinkSharedTestSuite()
GET     /api/domains/suites/:testsuite_id/linked @controllers.TestSuiteService.getLinkedSpecifications(testsuite_id: Long)
POST    /api/search/specs                       @controllers.ConformanceService.getSpecs()
GET     /api/spec/:spec_id                      @controllers.ConformanceService.getSpecification(spec_id: Long)
POST    /api/specs                              @controllers.ConformanceService.createSpecification()
GET	    /api/specs/:spec_id/actors              @controllers.ConformanceService.getSpecActors(spec_id : Long)
GET	    /api/specs/:spec_id/suites              @controllers.ConformanceService.getSpecTestSuites(spec_id : Long)
POST    /api/specs/deploy                       @controllers.ConformanceService.deployTestSuiteToSpecifications()
POST    /api/specs/deploy/resolve               @controllers.ConformanceService.resolvePendingTestSuites()
DELETE  /api/specs/:spec_id                     @controllers.SpecificationService.deleteSpecification(spec_id: Long)
POST    /api/specs/:spec_id                     @controllers.SpecificationService.updateSpecification(spec_id: Long)
GET     /api/specs/ofactor/:actor_id            @controllers.SpecificationService.getSpecificationOfActor(actor_id: Long)
GET     /api/specid/ofactor/:actor_id           @controllers.SpecificationService.getSpecificationIdOfActor(actor_id: Long)
GET     /api/specgroups                         @controllers.SpecificationService.getSpecificationGroups()
POST    /api/specgroups/search                  @controllers.SpecificationService.getSpecificationGroupsOfDomains()
GET     /api/specgroups/get/:group_id           @controllers.SpecificationService.getSpecificationGroup(group_id: Long)
POST    /api/specgroups                         @controllers.SpecificationService.createSpecificationGroup()
POST    /api/specgroups/:group_id               @controllers.SpecificationService.updateSpecificationGroup(group_id: Long)
POST    /api/specgroups/:group_id/delete        @controllers.SpecificationService.deleteSpecificationGroup(group_id: Long)
POST    /api/specgroups/:group_id/add           @controllers.SpecificationService.addSpecificationToGroup(group_id: Long)
POST    /api/specgroups/:group_id/copy          @controllers.SpecificationService.copySpecificationToGroup(group_id: Long)
POST    /api/specgroups/:spec_id/remove         @controllers.SpecificationService.removeSpecificationFromGroup(spec_id: Long)
POST    /api/specorder                          @controllers.SpecificationService.saveSpecificationOrder()
POST    /api/specorderreset                     @controllers.SpecificationService.resetSpecificationOrder()
POST    /api/search/actors                      @controllers.ConformanceService.searchActors()
POST    /api/search/actorsInDomain              @controllers.ConformanceService.searchActorsInDomain()
POST    /api/search/actorsForIds                @controllers.ConformanceService.getActors()
POST    /api/actors                             @controllers.ConformanceService.createActor()
GET     /api/actors/:actor_id                   @controllers.ConformanceService.getActor(actor_id: Long)
DELETE  /api/actors/:actor_id                   @controllers.ActorService.deleteActor(actor_id : Long)
POST    /api/actors/:actor_id                   @controllers.ActorService.updateActor(actor_id : Long)
GET	    /api/actors/:actor_id/conformance/:sut_id @controllers.ConformanceService.getConformanceStatus(actor_id : Long, sut_id : Long)
GET	    /api/actors/:actor_id/conformance/:sut_id/:testsuite_id @controllers.ConformanceService.getConformanceStatusForTestSuiteExecution(actor_id : Long, sut_id : Long, testsuite_id : Long)
GET	    /api/testcases/:testCaseId              @controllers.ConformanceService.getTestSuiteTestCaseForExecution(testCaseId : Long)
GET	    /api/testcases/:id/documentation        @controllers.ConformanceService.getTestCaseDocumentation(id : Long)
GET	    /api/testsuites/:id/documentation       @controllers.ConformanceService.getTestSuiteDocumentation(id : Long)
POST    /api/testdocumentation/                 @controllers.ConformanceService.getDocumentationForPreview()
POST    /api/testdocumentation/previewreport    @controllers.TestSuiteService.previewTestCaseDocumentationInReports()
GET     /api/actors/:actor_id/endpoints         @controllers.ConformanceService.getEndpointsForActor(actor_id : Long)
POST    /api/endpoints                          @controllers.ConformanceService.createEndpoint()
DELETE  /api/endpoints/:endpoint_id             @controllers.EndPointService.deleteEndPoint(endpoint_id : Long)
POST    /api/endpoints/:endpoint_id             @controllers.EndPointService.updateEndPoint(endpoint_id : Long)
POST    /api/parameters                         @controllers.ConformanceService.createParameter()
DELETE  /api/parameters/:parameter_id           @controllers.ParameterService.deleteParameter(parameter_id : Long)
POST    /api/parameters/:parameter_id           @controllers.ParameterService.updateParameter(parameter_id : Long)
POST    /api/parameters/order/:endpoint_id      @controllers.ParameterService.orderParameters(endpoint_id : Long)
GET     /api/domains/:domain_id/parameters                          @controllers.ConformanceService.getDomainParameters(domain_id : Long)
GET     /api/communities/:community_id/domainParameters             @controllers.ConformanceService.getDomainParametersOfCommunity(community_id : Long)
GET     /api/domains/:domain_id/parameters/:domain_parameter_id     @controllers.ConformanceService.getDomainParameter(domain_id : Long, domain_parameter_id : Long)
POST    /api/domains/:domain_id/parameters                          @controllers.ConformanceService.createDomainParameter(domain_id : Long)
DELETE  /api/domains/:domain_id/parameters/:domain_parameter_id     @controllers.ConformanceService.deleteDomainParameter(domain_id : Long, domain_parameter_id : Long)
POST    /api/domains/:domain_id/parameters/:domain_parameter_id     @controllers.ConformanceService.updateDomainParameter(domain_id : Long, domain_parameter_id : Long)
GET     /api/domains/:domain_id/parameters/:domain_parameter_id/download @controllers.ConformanceService.downloadDomainParameterFile(domain_id : Long, domain_parameter_id : Long)
GET     /api/testsuites/:test_suite_id                              @controllers.TestSuiteService.getTestSuiteWithTestCases(test_suite_id: Long)
POST    /api/testsuites/:test_suite_id                              @controllers.TestSuiteService.updateTestSuiteMetadata(test_suite_id: Long)
GET     /api/fulltestcases/:test_case_id                            @controllers.TestSuiteService.getTestCase(test_case_id: Long)
POST    /api/fulltestcases/:test_case_id                            @controllers.TestSuiteService.updateTestCaseMetadata(test_case_id: Long)
GET     /api/communities/:community_id/statementParameters          @controllers.ConformanceService.getStatementParametersOfCommunity(community_id : Long)

DELETE  /api/testresults/obsolete/all           @controllers.ConformanceService.deleteAllObsoleteTestResults()
DELETE  /api/testresults/obsolete/organisation  @controllers.ConformanceService.deleteObsoleteTestResultsForOrganisation()
DELETE  /api/testresults/obsolete/community     @controllers.ConformanceService.deleteObsoleteTestResultsForCommunity()
POST    /api/testresults                        @controllers.ConformanceService.deleteTestResults()

# User management API
GET     /api/admins/all                         @controllers.UserService.getSystemAdministrators()
POST    /api/admins/create                      @controllers.UserService.createSystemAdmin()
GET     /api/admins/:id                         @controllers.UserService.getUserById(id : Long)
POST    /api/admins/:id                         @controllers.UserService.updateSystemAdminProfile(id : Long)
DELETE  /api/admins/:id                         @controllers.UserService.deleteAdmin(id : Long)

# Session management API
POST    /api/search/tests                       @controllers.RepositoryService.searchTestCases()
POST    /api/search/testsByDomain               @controllers.RepositoryService.searchTestCasesInDomain()
GET     /api/dashboard/systems                  @controllers.SystemService.getSystems()
POST    /api/search/systems                     @controllers.SystemService.searchSystems()
POST    /api/search/systemsInCommunity          @controllers.SystemService.searchSystemsInCommunity()
POST    /api/dashboard/active                   @controllers.ReportService.getActiveTestResults()
POST    /api/dashboard/finished                 @controllers.ReportService.getFinishedTestResults()

GET     /api/system/configs                     @controllers.SystemConfigurationService.getConfigurationValues()
POST    /api/system/configs                     @controllers.SystemConfigurationService.updateConfigurationValue()
POST    /api/system/export                      @controllers.RepositoryService.exportSystemSettings()
POST    /api/system/import/preview              @controllers.RepositoryService.uploadSystemSettingsExport()
POST    /api/system/import/confirm              @controllers.RepositoryService.confirmSystemSettingsImport()
POST    /api/system/import/cancel               @controllers.RepositoryService.cancelSystemSettingsImport()

POST    /api/dashboard/suites/search            @controllers.TestSuiteService.searchTestSuites()
POST    /api/dashboard/suites/searchInDomain    @controllers.TestSuiteService.searchTestSuitesInDomain()

GET     /api/pages/default                      @controllers.LandingPageService.getCommunityDefaultLandingPage()
GET     /api/pages/:id                          @controllers.LandingPageService.getLandingPageById(id : Long)
DELETE  /api/pages/:id                          @controllers.LandingPageService.deleteLandingPage(id : Long)
POST    /api/pages/:id                          @controllers.LandingPageService.updateLandingPage(id : Long)

GET     /api/notices/default                    @controllers.LegalNoticeService.getCommunityDefaultLegalNotice()
GET     /api/notices/tbdefault                  @controllers.LegalNoticeService.getTestBedDefaultLegalNotice()
GET     /api/notices/:id                        @controllers.LegalNoticeService.getLegalNoticeById(id : Long)
DELETE  /api/notices/:id                        @controllers.LegalNoticeService.deleteLegalNotice(id : Long)
POST    /api/notices/:id                        @controllers.LegalNoticeService.updateLegalNotice(id : Long)

GET     /api/errortemplates/default             @controllers.ErrorTemplateService.getCommunityDefaultErrorTemplate()
GET     /api/errortemplates/:id                 @controllers.ErrorTemplateService.getErrorTemplateById(id : Long)
DELETE  /api/errortemplates/:id                 @controllers.ErrorTemplateService.deleteErrorTemplate(id : Long)
POST    /api/errortemplates/:id                 @controllers.ErrorTemplateService.updateErrorTemplate(id : Long)

GET     /api/triggers/:id                       @controllers.TriggerService.getTriggerById(id : Long)
DELETE  /api/triggers/:id                       @controllers.TriggerService.deleteTrigger(id : Long)
POST    /api/triggers/:id                       @controllers.TriggerService.updateTrigger(id : Long)
POST    /api/triggers/:id/clearStatus           @controllers.TriggerService.clearStatus(id : Long)
POST    /api/trigger/test                       @controllers.TriggerService.testTriggerEndpoint()
POST    /api/trigger/previewTriggerCall         @controllers.TriggerService.previewTriggerCall()
POST    /api/trigger/testTriggerCall            @controllers.TriggerService.testTriggerCall()

GET     /api/organizations/all                  @controllers.OrganizationService.getOrganizations()
POST    /api/organizations/create               @controllers.OrganizationService.createOrganization()
GET     /api/organizations/users                @controllers.UserService.getUsersByOrganization(id : Long)
GET     /api/organizations/basicusers           @controllers.UserService.getBasicUsersByOrganization(id : Long)
GET     /api/organizations/:org_id              @controllers.OrganizationService.getOrganizationById(org_id : Long)
GET     /api/organizations/system/:system_id    @controllers.OrganizationService.getOrganizationBySystemId(system_id : Long)

DELETE  /api/organizations/:id                  @controllers.OrganizationService.deleteOrganization(id: Long)
POST    /api/organizations/:id                  @controllers.OrganizationService.updateOrganization(id : Long)
POST    /api/organizations/:id/users/create     @controllers.UserService.createUser(id: Long)
POST    /api/users/:user_id                     @controllers.UserService.updateUserProfile(user_id: Long)
DELETE  /api/users/:user_id                     @controllers.UserService.deleteVendorUser(user_id: Long)
GET     /api/organizations/orgparam/:id         @controllers.OrganizationService.getOrganisationParameterValues(id: Long)
GET     /api/organizations/orgparam/check/:id   @controllers.OrganizationService.checkOrganisationParameterValues(id: Long)
GET     /api/organizations/own/orgparam         @controllers.OrganizationService.getOwnOrganisationParameterValues()
POST    /api/organizations/orgparam/:id         @controllers.OrganizationService.updateOrganisationParameterValues(id: Long)
GET     /api/organizations/orgparam/:orgId/parameters/:parameterId/download @controllers.OrganizationService.downloadOrganisationParameterFile(orgId : Long, parameterId : Long)
POST    /api/organizations/:id/apiKey           @controllers.OrganizationService.updateOrganisationApiKey(id: Long)
DELETE  /api/organizations/:id/apiKey           @controllers.OrganizationService.deleteOrganisationApiKey(id: Long)
GET     /api/organizations/:id/apiKey           @controllers.OrganizationService.getAutomationKeysForOrganisation(id: Long)

GET     /api/communities/all                    @controllers.CommunityService.getCommunities()
GET     /api/communities/user                   @controllers.CommunityService.getUserCommunities()
POST    /api/communities/create                 @controllers.CommunityService.createCommunity()
GET     /api/communities/:id                    @controllers.CommunityService.getCommunityById(id : Long)
POST    /api/communities/:id                    @controllers.CommunityService.updateCommunity(id : Long)
DELETE  /api/communities/:id                    @controllers.CommunityService.deleteCommunity(id: Long)
POST    /api/communities/orgparam/create        @controllers.CommunityService.createOrganisationParameter()
POST    /api/communities/orgparam/:id           @controllers.CommunityService.updateOrganisationParameter(id: Long)
DELETE  /api/communities/orgparam/:id           @controllers.CommunityService.deleteOrganisationParameter(id: Long)
GET     /api/communities/orgparam/:id           @controllers.CommunityService.getOrganisationParameters(id: Long)
POST    /api/communities/orgparam/order/:id     @controllers.CommunityService.orderOrganisationParameters(id: Long)
POST    /api/communities/sysparam/create        @controllers.CommunityService.createSystemParameter()
POST    /api/communities/sysparam/:id           @controllers.CommunityService.updateSystemParameter(id: Long)
DELETE  /api/communities/sysparam/:id           @controllers.CommunityService.deleteSystemParameter(id: Long)
GET     /api/communities/sysparam/:id           @controllers.CommunityService.getSystemParameters(id: Long)
POST    /api/communities/sysparam/order/:id     @controllers.CommunityService.orderSystemParameters(id: Long)
GET     /api/communities/organizations/:id      @controllers.OrganizationService.getOrganizationsByCommunity(id: Long)
POST    /api/search/communities/organizations   @controllers.OrganizationService.searchOrganizations()
GET     /api/communities/organizations/:id/search @controllers.OrganizationService.searchOrganizationsByCommunity(id: Long)
GET     /api/communities/pages/:id              @controllers.LandingPageService.getLandingPagesByCommunity(id: Long)
POST    /api/communities/pages/create           @controllers.LandingPageService.createLandingPage()
GET     /api/communities/notices/:id            @controllers.LegalNoticeService.getLegalNoticesByCommunity(id: Long)
POST    /api/communities/notices/create         @controllers.LegalNoticeService.createLegalNotice()
GET     /api/communities/errortemplates/:id     @controllers.ErrorTemplateService.getErrorTemplatesByCommunity(id: Long)
POST    /api/communities/errortemplates/create  @controllers.ErrorTemplateService.createErrorTemplate()
GET     /api/communities/triggers/:id           @controllers.TriggerService.getTriggersByCommunity(id: Long)
POST    /api/communities/triggers/create        @controllers.TriggerService.createTrigger()
GET     /api/communities/admins/all             @controllers.UserService.getCommunityAdministrators()
POST    /api/communities/admins/create          @controllers.UserService.createCommunityAdmin()
POST    /api/communities/admins/create          @controllers.UserService.createCommunityAdmin()
POST    /api/communities/admins/:id             @controllers.UserService.updateCommunityAdminProfile(id : Long)
GET     /api/communities/labels/:id             @controllers.CommunityService.getCommunityLabels(id: Long)
POST    /api/communities/labels/:id             @controllers.CommunityService.setCommunityLabels(id: Long)
POST    /api/communities/:communityId/resources @controllers.CommunityService.createCommunityResource(communityId: Long)
POST    /api/communities/resources/:id          @controllers.CommunityService.updateCommunityResource(id: Long)
DELETE  /api/communities/resources/:id          @controllers.CommunityService.deleteCommunityResource(id: Long)
POST    /api/communities/:communityId/resources/delete @controllers.CommunityService.deleteCommunityResources(communityId: Long)
GET     /api/communities/:communityId/resources @controllers.CommunityService.searchCommunityResources(communityId: Long)
GET     /api/communities/resources/:id/download @controllers.CommunityService.downloadCommunityResourceById(id: Long)
GET     /api/communities/:communityId/resources/list @controllers.CommunityService.getCommunityResources(communityId: Long)
GET     /api/communities/:communityId/resources/archive @controllers.CommunityService.downloadCommunityResources(communityId: Long)
POST    /api/communities/:communityId/resources/archive @controllers.CommunityService.uploadCommunityResourcesInBulk(communityId: Long)

# Test Result management API
POST    /api/tests/binaryMetadata               @controllers.TestResultService.getBinaryMetadata()
GET     /api/tests/result/:sessionId            @controllers.RepositoryService.getTestResult(sessionId: String)
GET     /api/tests/resultadmin/:sessionId       @controllers.RepositoryService.getTestResultAdmin(sessionId: String)

# Test management API
GET	    /api/tests/:test_id/definition          @controllers.TestService.getTestCaseDefinition(test_id : String)
GET	    /api/actordefinitions                   @controllers.TestService.getActorDefinitions()
POST	/api/tests/:test_id/initiate            @controllers.TestService.initiate(test_id:String)
POST	/api/tests/:session_id/configure        @controllers.TestService.configure(session_id:String)
POST	/api/tests/:session_id/provide          @controllers.TestService.provideInput(session_id:String)
POST	/api/tests/:session_id/provideadmin     @controllers.TestService.provideInputAdmin(session_id:String)
POST	/api/tests/:session_id/preliminary      @controllers.TestService.initiatePreliminary(session_id:String)
POST	/api/tests/:session_id/start            @controllers.TestService.start(session_id:String)
POST	/api/tests/:session_id/stop             @controllers.TestService.stop(session_id:String)
POST	/api/tests/:session_id/restart          @controllers.TestService.restart(session_id:String)
POST    /api/tests/startHeadless                @controllers.TestService.startHeadlessTestSessions()
POST	/api/tests/stopAll                      @controllers.TestService.stopAll()
POST	/api/tests/stopAllCommunity             @controllers.TestService.stopAllCommunitySessions(communityId:Long)
POST	/api/tests/stopAllOrganisation          @controllers.TestService.stopAllOrganisationSessions(organisationId:Long)

# WebSocket management API
GET     /api/ws                                 @controllers.WebSocketService.socket

# Test suite management API
DELETE  /api/suite/:suite_id/undeploy           @controllers.TestSuiteService.undeployTestSuite(suite_id: Long)
GET     /api/suite/:suite_id                    @controllers.TestSuiteService.downloadTestSuite(suite_id: Long)

# Endpoint management API
GET     /api/endpoints                          @controllers.ConformanceService.getEndpoints()
GET     /api/endpoints/checkConfig              @controllers.ConformanceService.checkConfigurations()
GET     /api/endpoints/systemConfig             @controllers.ConformanceService.getSystemConfigurations()
GET     /api/endpoints/:endpoint_id/config      @controllers.SystemService.getEndpointConfigurations(endpoint_id: Long)
GET     /api/endpoints/config                   @controllers.SystemService.getConfigurationsWithEndpointIds()
POST    /api/endpoints/:endpoint_id/config      @controllers.SystemService.saveEndpointConfiguration(endpoint_id: Long)
DELETE  /api/endpoints/:endpoint_id/config      @controllers.SystemService.deleteEndpointConfiguration(endpoint_id: Long)
GET     /api/endpoints/:endpoint_id/config/download @controllers.SystemService.downloadEndpointConfigurationFile(endpoint_id: Long)

# Report management API
POST    /api/reports/active                     @controllers.ReportService.getSystemActiveTestResults()
POST    /api/reports                            @controllers.ReportService.getTestResults()
GET     /api/reports/:session_id                @controllers.ReportService.getTestResultOfSession(session_id: String)
POST    /api/reports/create                     @controllers.ReportService.createTestReport()
GET     /api/reports/:session_id/steps          @controllers.ReportService.getTestStepResults(session_id:String)

# Conformance certificate API
GET     /api/conformancecertificate             @controllers.ConformanceService.getConformanceCertificateSettings(community_id: Long)
POST    /api/conformancecertificate             @controllers.ConformanceService.updateConformanceCertificateSettings(community_id: Long)
POST    /api/conformancecertificate/test        @controllers.ConformanceService.testKeystoreSettings(community_id: Long)
GET     /api/conformancecertificate/download    @controllers.ConformanceService.downloadConformanceCertificateKeystore(community_id: Long)

# Repository file serving and management API
GET     /api/repository/tests/:test_id/definition               @controllers.RepositoryService.getTestCaseDefinition(test_id:String)
GET     /api/repository/reports/teststep/:session_id/*file      @controllers.RepositoryService.getTestStepReport(session_id: String, file)
GET     /api/repository/reports/testdata/:session_id/:data_id   @controllers.RepositoryService.getTestStepReportData(session_id: String, data_id: String)
GET     /api/repository/reports/testdataurl/:session_id/:data_id @controllers.RepositoryService.getTestStepReportDataAsDataUrl(session_id: String, data_id: String)
GET     /api/repository/reports/logs/:session_id                @controllers.RepositoryService.getTestSessionLog(session_id: String)
GET     /api/repository/tests/:session_id/interactions          @controllers.RepositoryService.getPendingTestSessionInteractions(session_id: String)
GET     /api/repository/tests/:session_id/admininteractions     @controllers.RepositoryService.getPendingTestSessionInteractionsAdmin(session_id: String)
GET     /api/repository/admininteractions                       @controllers.RepositoryService.getPendingTestSessionsForAdminInteraction()
GET     /api/repository/export/testcase                         @controllers.RepositoryService.exportTestCaseReport()
GET     /api/repository/export/teststep/:session_id/*path       @controllers.RepositoryService.exportTestStepReport(session_id: String, path)
GET     /api/repository/export/conformance                      @controllers.RepositoryService.exportConformanceStatementReport()
POST    /api/repository/export/certificatedemo                  @controllers.RepositoryService.exportDemoConformanceCertificateReport(community_id: Long)
POST    /api/repository/export/certificate                      @controllers.RepositoryService.exportConformanceCertificateReport()
POST    /api/repository/exportOwn/certificate                   @controllers.RepositoryService.exportOwnConformanceCertificateReport()
GET     /api/repository/resource/:test_id/*file                 @controllers.RepositoryService.getTestSuiteResource(test_id: String, file: String)

POST    /api/communities/export/:id                             @controllers.RepositoryService.exportCommunity(id: Long)
POST    /api/communities/export/admin/:id                       @controllers.RepositoryService.exportCommunityAndSettings(id: Long)
POST    /api/communities/import/preview/:id                     @controllers.RepositoryService.uploadCommunityExportCommunityAdmin(id: Long)
POST    /api/communities/import/preview/admin/:id               @controllers.RepositoryService.uploadCommunityExportTestBedAdmin(id: Long)
POST    /api/communities/import/cancel/:id                      @controllers.RepositoryService.cancelCommunityImport(id: Long)
POST    /api/communities/import/confirm/:id                     @controllers.RepositoryService.confirmCommunityImportCommunityAdmin(id: Long)
POST    /api/communities/import/confirm/admin/:id               @controllers.RepositoryService.confirmCommunityImportTestBedAdmin(id: Long)
POST    /api/domains/export/:id                                 @controllers.RepositoryService.exportDomain(id: Long)
POST    /api/domains/export/admin/:id                           @controllers.RepositoryService.exportDomainAndSettings(id: Long)
POST    /api/domains/import/preview/:id                         @controllers.RepositoryService.uploadDomainExportCommunityAdmin(id: Long)
POST    /api/domains/import/preview/admin/:id                   @controllers.RepositoryService.uploadDomainExportTestBedAdmin(id: Long)
POST    /api/domains/import/cancel/:id                          @controllers.RepositoryService.cancelDomainImport(id: Long)
POST    /api/domains/import/confirm/:id                         @controllers.RepositoryService.confirmDomainImportCommunityAdmin(id: Long)
POST    /api/domains/import/confirm/admin/:id                   @controllers.RepositoryService.confirmDomainImportTestBedAdmin(id: Long)
POST    /api/initdata                                           @controllers.RepositoryService.applySandboxData()

GET     /api/healthcheck                                         @controllers.Application.healthcheck()

GET     /api/rest                                                @controllers.Application.restApiInfo()
POST    /api/rest/tests/start                                    @controllers.TestAutomationService.start()
POST    /api/rest/tests/stop                                     @controllers.TestAutomationService.stop()
GET     /api/rest/tests/status                                   @controllers.TestAutomationService.status()
POST    /api/rest/tests/status                                   @controllers.TestAutomationService.status()
GET     /api/rest/tests/report/:sessionId                        @controllers.TestAutomationService.report(sessionId: String)
POST    /api/rest/testsuite/deploy                               @controllers.TestSuiteAutomationService.deploy()
POST    /api/rest/testsuite/undeploy                             @controllers.TestSuiteAutomationService.undeploy()
POST    /api/rest/testsuite/deployShared                         @controllers.TestSuiteAutomationService.deployShared()
POST    /api/rest/testsuite/undeployShared                       @controllers.TestSuiteAutomationService.undeployShared()
POST    /api/rest/testsuite/linkShared                           @controllers.TestSuiteAutomationService.linkShared()
POST    /api/rest/testsuite/unlinkShared                         @controllers.TestSuiteAutomationService.unlinkShared()

POST    /api/crumbs                                              @controllers.BreadcrumbService.getBreadcrumbLabels()

GET     /resources/:resourceName                                 @controllers.CommunityService.downloadCommunityResourceByName(resourceName: String)
GET     /badgereportpreview/:status/:systemId/:specId/:actorId             @controllers.ConformanceService.conformanceBadgeReportPreview(status: String, systemId: Long, specId: Long, actorId: Long)
GET     /badgereportpreview/:status/:systemId/:specId/:actorId/:snapshotId @controllers.ConformanceService.conformanceBadgeReportPreviewForSnapshot(status: String, systemId: Long, specId: Long, actorId: Long, snapshotId: Long)

GET     /badge/:systemKey/:actorKey                              @controllers.ConformanceService.conformanceBadge(systemKey: String, actorKey: String)
GET     /badge/:systemKey/:actorKey/:snapshotKey                 @controllers.ConformanceService.conformanceBadgeForSnapshot(systemKey: String, actorKey: String, snapshotKey: String)
GET     /api/badge/spec/:spec_id/badge/:status                   @controllers.SpecificationService.getBadgeForStatus(spec_id: Long, status: String)
GET     /api/badge/spec/:spec_id/actor/:actor_id/badge/:status   @controllers.ActorService.getBadgeForStatus(spec_id: Long, actor_id: Long, status: String)
GET     /api/badgeurl/system/:systemId/actor/:actorId            @controllers.ConformanceService.conformanceBadgeUrl(systemId: Long, actorId: Long)
GET     /api/badge/system/:systemId/actor/:actorId               @controllers.ConformanceService.conformanceBadgeByIds(systemId: Long, actorId: Long)

GET     /api/themes                                              @controllers.SystemConfigurationService.getThemes()
POST    /api/themes                                              @controllers.SystemConfigurationService.createTheme()
GET     /api/themes/:themeId                                     @controllers.SystemConfigurationService.getTheme(themeId: Long)
POST    /api/themes/:themeId                                     @controllers.SystemConfigurationService.updateTheme(themeId: Long)
DELETE  /api/themes/:themeId                                     @controllers.SystemConfigurationService.deleteTheme(themeId: Long)
POST    /api/themes/:themeId/activate                            @controllers.SystemConfigurationService.activateTheme(themeId: Long)
GET     /api/themes/resource/preview                             @controllers.SystemConfigurationService.previewThemeResource()
POST    /api/system/configs/testEmail                            @controllers.SystemConfigurationService.testEmailSettings()

# Map static resources from the /public folder to the /assets URL path
GET     /assets/*file               controllers.Assets.at(path="/public", file)
GET     /webjars/*file              @org.webjars.play.WebJarAssets.at(file)