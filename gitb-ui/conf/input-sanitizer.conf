#
# Configuration file that drives the input sanitization logic.
#
# The configuration for the handling of individual parameters is done by means of parameter keys.
# These parameter keys are the fully qualified name of the controller method, followed by the path of the
# parameter. This path has itself hierarchy in case of parameters provided as JSON objects.
#
# Switch sanitization fully on or off,
inputSanitizer.enabled = "true"
# Comma-separated list of HTTP methods that will be checked (to avoid checking readonly operations).
inputSanitizer.methodsToCheck = "POST,PUT,DELETE"
# The default expression applied to all input. This is a blacklist regular expression meaning that
# a match would result in the request to be dropped.
inputSanitizer.defaultBlacklistExpression = "(?is).*(?:(?:\\b(?:on[a-zA-Z]+)\\s*=)|(?:javascript:)|(?:<\\s*\\/*(?:(?:script)|(?:style\\s*=)))|(?:<\\s*meta)|(?:<\\s*a)|(?:<\\s*iframe)|(?:<\\s*embed)|(?:<\\s*img)).*"
# The list of parameters that will not be checked. This is done for performance optimisation in cases where checking
# would be costly but also not meaningful. This includes parameters with BASE64 values (i.e. binary) and HTML content
# that is otherwise sanitized.
inputSanitizer.parametersToSkip = [
    "controllers.AccountService.submitFeedback.msg_attachments.data",
    "controllers.AccountService.submitFeedback.msg_content",
    "controllers.AccountService.updateVendorProfile.properties.valueBinary",
    "controllers.CommunityService.createCommunity.community_selfreg_token_help_text",
    "controllers.CommunityService.selfRegister.properties.valueBinary",
    "controllers.CommunityService.updateCommunity.community_selfreg_token_help_text",
    "controllers.ConformanceService.getDocumentationForPreview.content",
    "controllers.RepositoryService.updateConformanceCertificateSettings.settings.message",
    "controllers.RepositoryService.updateConformanceOverviewCertificateSettings.settings.messages.message",
    "controllers.ConformanceService.createDomainParameter.config.valueBinary",
    "controllers.ConformanceService.updateDomainParameter.config.valueBinary",
    "controllers.ErrorTemplateService.updateErrorTemplate.content",
    "controllers.ErrorTemplateService.createErrorTemplate.content",
    "controllers.LandingPageService.createLandingPage.content",
    "controllers.LandingPageService.updateLandingPage.content",
    "controllers.LegalNoticeService.createLegalNotice.content",
    "controllers.LegalNoticeService.updateLegalNotice.content",
    "controllers.OrganizationService.createOrganization.properties.valueBinary",
    "controllers.OrganizationService.updateOrganization.properties.valueBinary",
    "controllers.RepositoryService.exportConformanceCertificateReport.settings.message",
    "controllers.RepositoryService.exportConformanceOverviewCertificateReport.settings.messages.message",
    "controllers.RepositoryService.exportDemoConformanceCertificateReport.settings.message",
    "controllers.RepositoryService.exportDemoConformanceOverviewCertificateReport.settings.messages.message",
    "controllers.RepositoryService.uploadDomainExport.data",
    "controllers.RepositoryService.uploadCommunityExport.data",
    "controllers.SystemConfigurationService.updateConfigurationValue.parameter",
    "controllers.SystemService.registerSystemWithOrganization.properties.valueBinary",
    "controllers.SystemService.saveEndpointConfiguration.config.valueBinary",
    "controllers.SystemService.updateSystemProfile.properties.valueBinary",
    "controllers.TestResultService.getBinaryMetadata.data",
    "controllers.TestService.provideInput.inputs.value",
    "controllers.TestService.provideInput.inputs.valueBinary",
    "controllers.TestSuiteService.previewTestCaseDocumentationInReports.documentation",
    "controllers.TestSuiteService.updateTestCaseMetadata.documentation",
    "controllers.TestSuiteService.updateTestSuiteMetadata.documentation",
    "controllers.TriggerService.testTriggerCall.payload"
]
# The set of parameters that will be further treated as JSON objects resulting in the identification
# of individual properties (at any depth). It is not mandatory to include these as not doing so will
# simply check the complete JSON block against the default blacklist (which would work without problems).
# The purpose is to allow special treatment of individual properties, either for specific whitelists or
# to skip.
inputSanitizer.parametersAsJson = [
    "controllers.AccountService.submitFeedback.msg_attachments",
    "controllers.AccountService.updateVendorProfile.properties",
    "controllers.CommunityService.exportCommunity",
    "controllers.CommunityService.selfRegister.properties",
    "controllers.CommunityService.setCommunityLabels.values",
    "controllers.ConformanceService.createDomainParameter.config",
    "controllers.ConformanceService.updateDomainParameter.config",
    "controllers.RepositoryService.updateConformanceCertificateSettings.settings",
    "controllers.RepositoryService.updateConformanceOverviewCertificateSettings.settings",
    "controllers.OrganizationService.createOrganization.properties",
    "controllers.OrganizationService.updateOrganization.properties",
    "controllers.RepositoryService.confirmCommunityImport.items",
    "controllers.RepositoryService.confirmDomainImport.items",
    "controllers.RepositoryService.exportConformanceCertificateReport.settings",
    "controllers.RepositoryService.exportConformanceOverviewCertificateReport.settings",
    "controllers.RepositoryService.exportDemoConformanceCertificateReport.settings",
    "controllers.RepositoryService.exportDemoConformanceOverviewCertificateReport.settings",
    "controllers.SystemService.registerSystemWithOrganization.properties",
    "controllers.SystemService.saveEndpointConfiguration.config",
    "controllers.SystemService.updateSystemProfile.properties",
    "controllers.TestService.provideInput.inputs"
]
# The expressions to apply as a whitelist check against specific parameters. As these are whitelists,
# the check would have to succeed to allow processing of the request. If no whitelist is configured
# for a parameter the default blacklist applies. A whitelist may even be used to relax the blacklist
# check in specific cases if there is (very) good reason.
#
# Example { "controllers.OrganizationService.updateOrganization.vendor_sname" = ".*" } (allow any value to pass)
inputSanitizer.parameterWhitelistExpressions = []