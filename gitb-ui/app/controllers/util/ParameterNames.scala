/*
 * Copyright (C) 2025 European Union
 *
 * Licensed under the EUPL, Version 1.2 or - as soon they will be approved by the European Commission - subsequent
 * versions of the EUPL (the "Licence"); You may not use this work except in compliance with the Licence.
 *
 * You may obtain a copy of the Licence at:
 *
 * https://interoperable-europe.ec.europa.eu/collection/eupl/eupl-text-eupl-12
 *
 * Unless required by applicable law or agreed to in writing, software distributed under the Licence is distributed on an
 * "AS IS" basis, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the Licence for
 * the specific language governing permissions and limitations under the Licence.
 */

package controllers.util

object ParameterNames {

  val USER_ID = "GITB-USER-ID"
  val ID      = "id"
  val ADMIN   = "admin"
  val LABEL   = "label"
  val PUBLIC_LABEL   = "publicLabel"
  val SNAPSHOT  = "snapshot"
  val PUBLIC  = "public"
  val REPORT = "report"
  val OVERVIEW = "overview"
  val KEY_PASS   = "key_pass"
  val KEYSTORE_PASS   = "keystore_pass"
  val ENABLE = "enable"
  val USE_STYLE_SHEET = "useStylesheet"
  val SIGN_PDF_REPORTS = "signPdfReports"
  val USE_CUSTOM_PDF_REPORTS = "useCustomPdfReports"
  val USE_CUSTOM_PDFS_WITH_CUSTOM_XML = "useCustomPdfReportsWithCustomXml"
  val CUSTOM_PDF_SERVICE = "customPdfService"

  //Dashboard filter parameters
  val COMMUNITY_IDS = "community_ids"
  val DOMAIN_IDS = "domain_ids"
  val SPEC_IDS = "specification_ids"
  val SPEC_ORDERS = "specification_orders"
  val TEST_SUITE_IDS = "test_suite_ids"
  val TEST_CASE_IDS = "test_case_ids"
  val ORG_IDS = "organization_ids"
  val SYSTEM_IDS = "system_ids"
  val RESULTS = "results"
  val STATUS = "status"
  val START_TIME_BEGIN = "start_time_begin"
  val START_TIME_END = "start_time_end"
  val END_TIME_BEGIN = "end_time_begin"
  val END_TIME_END = "end_time_end"
  val UPDATE_TIME_BEGIN = "update_time_begin"
  val UPDATE_TIME_END = "update_time_end"
  val TEST_SUITE_ID = "test_suite_id"

  //Dashboard sorting
  val SORT_COLUMN = "sort_column"
  val SORT_ORDER = "sort_order"
  val CREATION_ORDER_SORT = "creationOrderSort"
  //Some common parameters
  val PASSWORD = "password"
  val NAME     = "name"
  val EMAIL    = "email"
	val IDS      = "ids"
  val TYPE     = "type"
  val DESCRIPTION = "description"
  val DOCUMENTATION = "documentation"
  val USE = "use"
  val KIND = "kind"
  val TEST_KEY = "test_key"
  val OPERATION = "operation"
  val URL = "url"
  val ACTIVE = "active"
  val EVENT = "event"
  val VERSION = "version"
  val OPTIONAL = "optional"
  val DISABLED = "disabled"
  val TAGS = "tags"
  val SPEC_REFERENCE = "specReference"
  val SPEC_DESCRIPTION = "specDescription"
  val SPEC_LINK = "specLink"
  val TEST_SUITE = "testSuite"
  val TEST_CASE = "testCase"

  // Landing page Service
  val DEFAULT = "default_flag"
  val CONTENT = "content"
  val LANDING_PAGE_ID = "landing_page_id"
  val LEGAL_NOTICE_ID = "legal_notice_id"
  val ERROR_TEMPLATE_ID = "error_template_id"

  //System configuration parameters
  val PARAMETER = "parameter"
  val PARAMETER_ID = "parameter_id"

  //Account Service parameters
  val VENDOR_SNAME = "vendor_sname"
  val VENDOR_FNAME = "vendor_fname"
  val USER_NAME    = "user_name"
  val USER_EMAIL   = "user_email"
  val OLD_PASSWORD = "old_password"
  val ROLE_ID      = "role_id"
  val ORGANIZATION_ID = "organization_id"
  val OTHER_ORGANISATION = "other_organisation"
  val TEMPLATE = "template"
  val TEMPLATE_ID = "template_id"
  val TEMPLATE_NAME = "template_name"
  val CHECK_HAS_TESTS = "check_has_tests"

  val ORGANISATION_PARAMETERS = "org_params"
  val SYSTEM_PARAMETERS = "sys_params"
  val STATEMENT_PARAMETERS = "stm_params"

  //System Service parameters
  val SYSTEM    = "system"
  val SYSTEM_ID    = "system_id"
  val SYSTEM_SNAME = "system_sname"
  val SYSTEM_FNAME = "system_fname"
  val SYSTEM_DESC  = "system_description"
  val SYSTEM_VERSION = "system_version"
  val OTHER_SYSTEM = "other_system"

  val DATA = "data"
  val EXPRESSIONS = "expressions"
  val IS_BASE64 = "is_base64"

  //Conformance Service parameters
  val ACTOR   = "actor"
  val SPEC    = "spec"
  val SPECS   = "specs"
  val OPTIONS = "options"
	val SHORT_NAME = "sname"
	val FULL_NAME = "fname"
	val DESC  = "description"
  val METADATA  = "metadata"
  val DOMAIN = "domain"
  val DOMAIN_ID = "domain_id"
  val GROUP_ID = "group_id"
  val GROUP_IDS = "group_ids"
  val GROUP_ORDERS = "group_orders"
  val GROUPS = "groups"
	val SPECIFICATION_ID = "spec_id"
  val ACTIONS = "actions"
  val PENDING_ID = "pending_id"
  val PENDING_ACTION = "pending_action"
  val FULL = "full"
  val TESTS = "tests"
  val ITEMS = "items"

  //Community Service parameters
  val COMMUNITY_ID = "community_id"
  val COMMUNITY_SNAME = "community_sname"
  val COMMUNITY_FNAME = "community_fname"
  val COMMUNITY_EMAIL = "community_email"
  val COMMUNITY_SELFREG_TYPE = "community_selfreg_type"
  val COMMUNITY_SELFREG_RESTRICTION = "community_selfreg_restriction"
  val COMMUNITY_SELFREG_TOKEN = "community_selfreg_token"
  val COMMUNITY_SELFREG_TOKEN_HELP_TEXT = "community_selfreg_token_help_text"
  val COMMUNITY_SELFREG_NOTIFICATION = "community_selfreg_notification"
  val COMMUNITY_SELFREG_FORCE_TEMPLATE = "community_selfreg_force_template"
  val COMMUNITY_SELFREG_FORCE_PROPERTIES = "community_selfreg_force_properties"
  val COMMUNITY_INTERACTION_NOTIFICATION = "interaction_notification"
  val ALLOW_CERTIFICATE_DOWNLOAD = "allow_certificate_download"
  val ALLOW_STATEMENT_MANAGEMENT = "allow_statement_management"
  val ALLOW_SYSTEM_MANAGEMENT = "allow_system_management"
  val ALLOW_POST_TEST_ORG_UPDATE = "allow_post_test_org_update"
  val ALLOW_POST_TEST_SYS_UPDATE = "allow_post_test_sys_update"
  val ALLOW_POST_TEST_STM_UPDATE = "allow_post_test_stm_update"
  val ALLOW_AUTOMATION_API = "allow_automation_api"
  val ALLOW_COMMUNITY_VIEW = "allow_community_view"
  //TestService parameters
  val ACTOR_ID   = "actor_id"
  val ACTOR_DEFAULT   = "default"
  val DISPLAY_ORDER   = "displayOrder"
  val ACTOR_IDS   = "actor_ids"
  val ENDPOINT_ID   = "endpoint_id"
  val TEST_ID    = "test_id"
  val SESSION_ID = "session_id"
  val SESSION_IDS= "session_ids"
  val CONFIG     = "config"
  val INPUTS     = "inputs"
  val VALUE     = "value"
  val VALUES     = "values"
  val SIMPLE     = "simple"
  val ALLOWED_VALUES     = "allowedValues"
  val PROPERTIES = "properties"
  val TEST_STEP  = "teststep"
  val SETTINGS   = "settings"
  val LEVEL   = "level"
  val UPDATE_PASSWORDS  = "updatePasswords"
  val REMOVE_KEYSTORE   = "removeKeystore"
  val INCLUDE_KEYSTORE_DATA  = "keystore"
  val ADMIN_ONLY  = "admin_only"
  val NOT_FOR_TESTS  = "not_for_tests"
  val IN_EXPORTS  = "in_exports"
  val IN_SELFREG  = "in_selfreg"
  val HIDDEN = "hidden"
  val DEPENDS_ON = "dependsOn"
  val DEPENDS_ON_VALUE = "dependsOnValue"
  val DEFAULT_VALUE = "defaultValue"

  val FILE       = "file"
	val LIMIT      = "limit"
	val PAGE       = "page"
  val EXPORT     = "export"

  val MESSAGE_TYPE_ID = "msg_type_id"
  val MESSAGE_TYPE_DESCRIPTION = "msg_type_description"
  val MESSAGE_CONTENT = "msg_content"

  val SKIP_DEFAULT = "skipDefault"

  val FILTERING = "filtering"
  val FILTER = "filter"
  val SELECTED = "selected"
  val UNSELECTED = "unselected"
  val SUCCEEDED = "succeeded"
  val FAILED = "failed"
  val INCOMPLETE = "incomplete"

  val SEQUENTIAL = "sequential"
  var PAYLOAD = "payload"

  var UPDATE = "update"
  var SHARED = "shared"

  val SUCCESS_BADGE = "success_badge"
  val FAILURE_BADGE = "failure_badge"
  val OTHER_BADGE = "other_badge"
  val SUCCESS_BADGE_REPORT = "success_badge_report"
  val FAILURE_BADGE_REPORT = "failure_badge_report"
  val OTHER_BADGE_REPORT = "other_badge_report"
  val SUCCESS_BADGE_ENABLED = "success_badge_enabled"
  val FAILURE_BADGE_ENABLED = "failure_badge_enabled"
  val OTHER_BADGE_ENABLED = "other_badge_enabled"
  val SUCCESS_BADGE_REPORT_ENABLED = "success_badge_report_enabled"
  val FAILURE_BADGE_REPORT_ENABLED = "failure_badge_report_enabled"
  val OTHER_BADGE_REPORT_ENABLED = "other_badge_report_enabled"

  val HEADER_LOGO_FILE = "headerLogoFile"
  val FOOTER_LOGO_FILE = "footerLogoFile"
  val FAVICON_FILE = "faviconFile"
  val KEY = "key"
  val SEPARATOR_TITLE_COLOR = "separatorTitleColor"
  val MODAL_TITLE_COLOR = "modalTitleColor"
  val TABLE_TITLE_COLOR = "tableTitleColor"
  val CARD_TILE_COLOR = "cardTitleColor"
  val PAGE_TITLE_COLOR = "pageTitleColor"
  val HEADING_COLOR = "headingColor"
  val TAB_LINK_COLOR = "tabLinkColor"
  val FOOTER_TEXT_COLOR = "footerTextColor"
  val HEADER_BACKGROUND_COLOR = "headerBackgroundColor"
  val HEADER_BORDER_COLOR = "headerBorderColor"
  val HEADER_SEPARATOR_COLOR = "headerSeparatorColor"
  val HEADER_LOGO_PATH = "headerLogoPath"
  val FOOTER_BACKGROUND_COLOR = "footerBackgroundColor"
  val FOOTER_BORDER_COLOR = "footerBorderColor"
  val FOOTER_LOGO_PATH = "footerLogoPath"
  val FOOTER_LOGO_DISPLAY = "footerLogoDisplay"
  val FAVICON_PATH = "faviconPath"
  val REFERENCE = "reference"
  val TO = "to"
  val KEYS = "keys"
  val PRIMARY_BUTTON_COLOR = "primaryButtonColor"
  val PRIMARY_BUTTON_LABEL_COLOR = "primaryButtonLabelColor"
  val PRIMARY_BUTTON_HOVER_COLOR = "primaryButtonHoverColor"
  val PRIMARY_BUTTON_ACTIVE_COLOR = "primaryButtonActiveColor"
  val SECONDARY_BUTTON_COLOR = "secondaryButtonColor"
  val SECONDARY_BUTTON_LABEL_COLOR = "secondaryButtonLabelColor"
  val SECONDARY_BUTTON_HOVER_COLOR = "secondaryButtonHoverColor"
  val SECONDARY_BUTTON_ACTIVE_COLOR = "secondaryButtonActiveColor"
  val PENDING_ADMIN_INTERACTION = "pending_admin_interaction"
  val SERVICE_TYPE = "serviceType"
  val API_TYPE = "apiType"
  val IDENTIFIER = "identifier"
  val AUTH_BASIC_USERNAME = "authBasicUsername"
  val AUTH_BASIC_PASSWORD = "authBasicPassword"
  val AUTH_TOKEN_USERNAME = "authTokenUsername"
  val AUTH_TOKEN_PASSWORD = "authTokenPassword"
  val AUTH_TOKEN_PASSWORD_TYPE = "authTokenPasswordType"

}
